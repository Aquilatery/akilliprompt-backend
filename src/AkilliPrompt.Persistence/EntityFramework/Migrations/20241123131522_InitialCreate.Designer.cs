// <auto-generated />
using System;
using AkilliPrompt.Persistence.EntityFramework.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AkilliPrompt.Persistence.EntityFramework.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241123131522_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AkilliPrompt.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by_user_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modified_by_user_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.ToTable("categories", (string)null);

                    b.ToView(null);
                });

            modelBuilder.Entity("AkilliPrompt.Domain.Entities.Placeholder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by_user_id");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modified_by_user_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<Guid>("PromptId")
                        .HasColumnType("uuid")
                        .HasColumnName("prompt_id");

                    b.HasKey("Id")
                        .HasName("pk_placeholders");

                    b.HasIndex("PromptId")
                        .HasDatabaseName("ix_placeholders_prompt_id");

                    b.ToTable("placeholders", (string)null);

                    b.ToView(null);
                });

            modelBuilder.Entity("AkilliPrompt.Domain.Entities.Prompt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text")
                        .HasColumnName("created_by_user_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_active");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("ModifiedByUserId")
                        .HasColumnType("text")
                        .HasColumnName("modified_by_user_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_prompts");

                    b.ToTable("prompts", (string)null);

                    b.ToView(null);
                });

            modelBuilder.Entity("AkilliPrompt.Domain.Entities.PromptCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by_user_id");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modified_by_user_id");

                    b.Property<Guid>("PromptId")
                        .HasColumnType("uuid")
                        .HasColumnName("prompt_id");

                    b.HasKey("Id")
                        .HasName("pk_prompt_categories");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_prompt_categories_category_id");

                    b.HasIndex("PromptId", "CategoryId")
                        .IsUnique()
                        .HasDatabaseName("ix_prompt_categories_prompt_id_category_id");

                    b.ToTable("prompt_categories", (string)null);

                    b.ToView(null);
                });

            modelBuilder.Entity("AkilliPrompt.Domain.Entities.UserFavoritePrompt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by_user_id");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modified_by_user_id");

                    b.Property<Guid>("PromptId")
                        .HasColumnType("uuid")
                        .HasColumnName("prompt_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_favorite_prompts");

                    b.HasIndex("PromptId")
                        .HasDatabaseName("ix_user_favorite_prompts_prompt_id");

                    b.HasIndex("UserId", "PromptId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_favorite_prompts_user_id_prompt_id");

                    b.ToTable("user_favorite_prompts", (string)null);

                    b.ToView(null);
                });

            modelBuilder.Entity("AkilliPrompt.Domain.Entities.UserLikePrompt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by_user_id");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modified_by_user_id");

                    b.Property<Guid>("PromptId")
                        .HasColumnType("uuid")
                        .HasColumnName("prompt_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_like_prompts");

                    b.HasIndex("PromptId")
                        .HasDatabaseName("ix_user_like_prompts_prompt_id");

                    b.HasIndex("UserId", "PromptId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_like_prompts_user_id_prompt_id");

                    b.ToTable("user_like_prompts", (string)null);

                    b.ToView(null);
                });

            modelBuilder.Entity("AkilliPrompt.Domain.Entities.UserPromptComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("content");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by_user_id");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modified_by_user_id");

                    b.Property<Guid?>("ParentCommentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_comment_id");

                    b.Property<Guid>("PromptId")
                        .HasColumnType("uuid")
                        .HasColumnName("prompt_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_prompt_comments");

                    b.HasIndex("ParentCommentId")
                        .HasDatabaseName("ix_user_prompt_comments_parent_comment_id");

                    b.HasIndex("PromptId")
                        .HasDatabaseName("ix_user_prompt_comments_prompt_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_prompt_comments_user_id");

                    b.ToTable("user_prompt_comments", (string)null);

                    b.ToView(null);
                });

            modelBuilder.Entity("AkilliPrompt.Domain.Entities.UserSocialMediaAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by_user_id");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modified_by_user_id");

                    b.Property<short>("SocialMediaType")
                        .HasColumnType("smallint")
                        .HasColumnName("social_media_type");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("url");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_social_media_accounts");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_social_media_accounts_user_id");

                    b.ToTable("user_social_media_accounts", (string)null);

                    b.ToView(null);
                });

            modelBuilder.Entity("AkilliPrompt.Domain.Identity.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_application_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("role_name_index");

                    b.ToTable("application_roles", (string)null);

                    b.ToView(null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("019358eb-f6cb-78c6-b59c-848777da66af"),
                            ConcurrencyStamp = "019358ec-42e0-70ba-8049-655ecc8e2d2e",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("019358ec-9d53-7785-a270-e22e10677a63"),
                            ConcurrencyStamp = "019358ec-aedc-742c-b677-a6b6bd8ef3bb",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("AkilliPrompt.Domain.Identity.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_application_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_application_role_claims_role_id");

                    b.ToTable("application_role_claims", (string)null);

                    b.ToView(null);
                });

            modelBuilder.Entity("AkilliPrompt.Domain.Identity.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by_user_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modified_by_user_id");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_application_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_application_users_email");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("email_index");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("user_name_index");

                    b.ToTable("application_users", (string)null);

                    b.ToView(null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("019358e7-cfd6-7ce0-a572-55f7859864b9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b68dace3-2808-4be0-9a5d-637c5f2cfb09",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 11, 23, 15, 11, 4, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatedByUserId = "019358e7-cfd6-7ce0-a572-55f7859864b9",
                            Email = "alper.tunga@yazilim.academy",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALPER.TUNGA@YAZILIM.ACADEMY",
                            NormalizedUserName = "ALPERTUNGA",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0c74dcdd-892a-41a3-995d-92c8529529dc",
                            TwoFactorEnabled = false,
                            UserName = "alpertunga"
                        },
                        new
                        {
                            Id = new Guid("019358ef-0146-7bf9-994b-880e1002a653"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "019358ef-3691-7726-844a-c0d9979417f4",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 11, 23, 15, 11, 5, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatedByUserId = "019358ef-0146-7bf9-994b-880e1002a653",
                            Email = "merveeksii61@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MERVEEKSII61@GMAIL.COM",
                            NormalizedUserName = "MERVEEKSI",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "019358ef-213d-7ada-b02d-4e60dd64b9f9",
                            TwoFactorEnabled = false,
                            UserName = "merveeksi"
                        });
                });

            modelBuilder.Entity("AkilliPrompt.Domain.Identity.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_application_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_application_user_claims_user_id");

                    b.ToTable("application_user_claims", (string)null);

                    b.ToView(null);
                });

            modelBuilder.Entity("AkilliPrompt.Domain.Identity.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_application_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_application_user_logins_user_id");

                    b.ToTable("application_user_logins", (string)null);

                    b.ToView(null);
                });

            modelBuilder.Entity("AkilliPrompt.Domain.Identity.ApplicationUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_application_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_application_user_roles_role_id");

                    b.ToTable("application_user_roles", (string)null);

                    b.ToView(null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("019358e7-cfd6-7ce0-a572-55f7859864b9"),
                            RoleId = new Guid("019358eb-f6cb-78c6-b59c-848777da66af")
                        },
                        new
                        {
                            UserId = new Guid("019358ef-0146-7bf9-994b-880e1002a653"),
                            RoleId = new Guid("019358ec-9d53-7785-a270-e22e10677a63")
                        });
                });

            modelBuilder.Entity("AkilliPrompt.Domain.Identity.ApplicationUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(191)
                        .HasColumnType("character varying(191)")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasMaxLength(191)
                        .HasColumnType("character varying(191)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_application_user_tokens");

                    b.ToTable("application_user_tokens", (string)null);

                    b.ToView(null);
                });

            modelBuilder.Entity("AkilliPrompt.Domain.Entities.Placeholder", b =>
                {
                    b.HasOne("AkilliPrompt.Domain.Entities.Prompt", "Prompt")
                        .WithMany("Placeholders")
                        .HasForeignKey("PromptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_placeholders_prompts_prompt_id");

                    b.Navigation("Prompt");
                });

            modelBuilder.Entity("AkilliPrompt.Domain.Entities.PromptCategory", b =>
                {
                    b.HasOne("AkilliPrompt.Domain.Entities.Category", "Category")
                        .WithMany("PromptCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_prompt_categories_categories_category_id");

                    b.HasOne("AkilliPrompt.Domain.Entities.Prompt", "Prompt")
                        .WithMany("PromptCategories")
                        .HasForeignKey("PromptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_prompt_categories_prompts_prompt_id");

                    b.Navigation("Category");

                    b.Navigation("Prompt");
                });

            modelBuilder.Entity("AkilliPrompt.Domain.Entities.UserFavoritePrompt", b =>
                {
                    b.HasOne("AkilliPrompt.Domain.Entities.Prompt", "Prompt")
                        .WithMany("UserFavoritePrompts")
                        .HasForeignKey("PromptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_favorite_prompts_prompts_prompt_id");

                    b.HasOne("AkilliPrompt.Domain.Identity.ApplicationUser", "User")
                        .WithMany("UserFavoritePrompts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_favorite_prompts_application_users_user_id");

                    b.Navigation("Prompt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AkilliPrompt.Domain.Entities.UserLikePrompt", b =>
                {
                    b.HasOne("AkilliPrompt.Domain.Entities.Prompt", "Prompt")
                        .WithMany("UserLikePrompts")
                        .HasForeignKey("PromptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_like_prompts_prompts_prompt_id");

                    b.HasOne("AkilliPrompt.Domain.Identity.ApplicationUser", "User")
                        .WithMany("UserLikePrompts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_like_prompts_application_users_user_id");

                    b.Navigation("Prompt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AkilliPrompt.Domain.Entities.UserPromptComment", b =>
                {
                    b.HasOne("AkilliPrompt.Domain.Entities.UserPromptComment", "ParentComment")
                        .WithMany("ChildComments")
                        .HasForeignKey("ParentCommentId")
                        .HasConstraintName("fk_user_prompt_comments_user_prompt_comments_parent_comment_id");

                    b.HasOne("AkilliPrompt.Domain.Entities.Prompt", "Prompt")
                        .WithMany()
                        .HasForeignKey("PromptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_prompt_comments_prompts_prompt_id");

                    b.HasOne("AkilliPrompt.Domain.Identity.ApplicationUser", "User")
                        .WithMany("UserPromptComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_prompt_comments_application_users_user_id");

                    b.Navigation("ParentComment");

                    b.Navigation("Prompt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AkilliPrompt.Domain.Entities.UserSocialMediaAccount", b =>
                {
                    b.HasOne("AkilliPrompt.Domain.Identity.ApplicationUser", "User")
                        .WithMany("UserSocialMediaAccounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_social_media_accounts_application_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AkilliPrompt.Domain.Identity.ApplicationRoleClaim", b =>
                {
                    b.HasOne("AkilliPrompt.Domain.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_application_role_claims_application_roles_role_id");
                });

            modelBuilder.Entity("AkilliPrompt.Domain.Identity.ApplicationUser", b =>
                {
                    b.OwnsOne("AkilliPrompt.Domain.ValueObjects.FullName", "FullName", b1 =>
                        {
                            b1.Property<Guid>("ApplicationUserId")
                                .HasColumnType("uuid")
                                .HasColumnName("application_user_id");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("first_name");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("last_name");

                            b1.HasKey("ApplicationUserId");

                            b1.ToTable((string)null);

                            b1.ToView(null);

                            b1.WithOwner()
                                .HasForeignKey("ApplicationUserId");
                        });

                    b.Navigation("FullName")
                        .IsRequired();
                });

            modelBuilder.Entity("AkilliPrompt.Domain.Identity.ApplicationUserClaim", b =>
                {
                    b.HasOne("AkilliPrompt.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_application_user_claims_application_users_user_id");
                });

            modelBuilder.Entity("AkilliPrompt.Domain.Identity.ApplicationUserLogin", b =>
                {
                    b.HasOne("AkilliPrompt.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_application_user_logins_application_users_user_id");
                });

            modelBuilder.Entity("AkilliPrompt.Domain.Identity.ApplicationUserRole", b =>
                {
                    b.HasOne("AkilliPrompt.Domain.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_application_user_roles_application_roles_role_id");

                    b.HasOne("AkilliPrompt.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_application_user_roles_application_users_user_id");
                });

            modelBuilder.Entity("AkilliPrompt.Domain.Identity.ApplicationUserToken", b =>
                {
                    b.HasOne("AkilliPrompt.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_application_user_tokens_application_users_user_id");
                });

            modelBuilder.Entity("AkilliPrompt.Domain.Entities.Category", b =>
                {
                    b.Navigation("PromptCategories");
                });

            modelBuilder.Entity("AkilliPrompt.Domain.Entities.Prompt", b =>
                {
                    b.Navigation("Placeholders");

                    b.Navigation("PromptCategories");

                    b.Navigation("UserFavoritePrompts");

                    b.Navigation("UserLikePrompts");
                });

            modelBuilder.Entity("AkilliPrompt.Domain.Entities.UserPromptComment", b =>
                {
                    b.Navigation("ChildComments");
                });

            modelBuilder.Entity("AkilliPrompt.Domain.Identity.ApplicationUser", b =>
                {
                    b.Navigation("UserFavoritePrompts");

                    b.Navigation("UserLikePrompts");

                    b.Navigation("UserPromptComments");

                    b.Navigation("UserSocialMediaAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
